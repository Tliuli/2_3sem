*(5Б) Какими способами можно задать значения для данных-членов(полей) структуры?
а)
struct Point
{
   int x = 0;
   int y = 0;
};

б)
struct Point {
    int x, y;
};
 
int main()
{
    struct Point p1 = { 0, 1 };
}


*(5Б) std::numeric_limits<double>::epsilon() - Сколько это, и в чем математический смысл этого числа.
numeric_limits <- класс, epsilon <- машинный эпсилон - машинно-зависимое значение с плавающей запятой, которое обеспечивает верхнюю границу относительной ошибки из-за округления в арифметике с плавающей запятой; возвращает разницу между 1 и наименьшим значением больше 1, которое этот тип данных может представлять.

The difference between 1 and the smallest value greater than 1
for double objects is: 2.22045e-016.


*(5Б) Отличие структур и классов в С++, для чего следует использовать структуры.

В C++ структура совпадает с классом, за исключением того, что её члены по умолчанию public.
* В качестве спецификаторов доступа действуют три ключевых слова. Они ограничивают доступ к членам класса (class or struct) после спецификатора, пока другой спецификатор снова не изменит уровень доступа: public, protected, private.

Следует использовать, когда работаем с общедоступными данными и сравнительно малым числом функций + при де/сериализации файлов.

*C.2: Use class if the class has an invariant; use struct if the data members can vary independently.


*(5Б) Конструкторы и деструкторы, для чего нужны.
Конструктор - метод для инициализации структуры. Деструктор - метод, вызываемый компилятором при удалении структуры. Используется для освобождения памяти и удаления нестатических переменных объектов.


*(5Б) Перечислите возможные проблемы при работе с целыми и вещественными числами в с++. А что в питоне?

С++
При выполнении арифметических операций над целочисленным типом переполнение считается неопределенным поведением (UB). Такое поведение может вызывать верные, несогласованные и/или неверные действия как сразу, так и в дальнейшем.
Python 
Целочисленные типы не переполняются, т.к. при работе с ними используется длинная арифметика. 

Вещественные числа
Разное поведение при делении, округлении.

