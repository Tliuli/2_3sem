*(5Б) Двухэтапная трансляция шаблонов что такое.
1. Без создания экземпляра сам код шаблона проверяется на синтаксис.
2. Во время создания экземпляра (когда известен точный тип) код шаблона проверяется еще раз, чтобы убедиться, что все вызовы допустимы для этого конкретного типа.

*(5Б) Как происходит разрешение перегрузки как шаблонных, так и обычных функций с одинаковыми именами.
На первом этапе компилятор осуществляет поиск (lookup) тех перегруженных функций, которые по правилам языка допустимы для данного вызова (candidate functions). 
В случае шаблонов выполняется еще вывод аргументов шаблона (template argument deduction). 
У этих функций количество параметров должно совпадать с количеством аргументов и тип аргументов должен совпадать с типом параметров (или существовать неявное преобразование типа аргументов к типу параметров). 
Если таких функций не найдено, поиск завершается ошибкой. Если найдена ровно одна функция, то поиск завершается успешно. 
Если найдено несколько функций, то начинается следующий этап, компилятор пытается выбрать ту, которая подходит «лучше всего» для данных аргументов (match the arguments most closely). 
Этот этап называется разрешением перегрузки (overload resolution). Если такая функция найдена, то разрешение перегрузки завершается успешно, иначе возникает ошибка (ambiguous call to overloaded function).

*(5Б) Что такое специализация шаблона. Для чего необходима?
При определении шаблона класса компилятор сам генерирует по этому шаблону классы, которые применяют определенные типы. 
Однако мы сами можем определить подобные классы для конкретного набора параметров шаблона. Подобные определения классов называются специализацией шаблона.

Механизм, позволяющий в некоторых ситуациях добиться большей производительности. 

*(5Б) Для чего нужны static\dynamic_cast. Преимущества static_cast над "(type)value" конструкцией
Необходимы для приведения типов.

static_cast выполняет проверку на этапе компиляции.
Если типы несовместимые, компиляция завершается с ошибкой.

dynamic_cast выполняет проверку на этапе выполнения и зависит от механизма
динамической информации о типах (RTTI), поэтому его использование влечет за
собой некоторые накладные расходы. Если типы несовместимые, dynamic_cast бросает
исключение std::bad_cast (для ссылок) или возвращает NULL (для указателей).

dynamic_cast работает только для указателей и ссылок и только для полиморфных
классов, связанных открытым наследованием; при попытке использовать его с
чем-нибудь другим произойдет ошибка компиляции. Хотя это тоже можно считать
одним из проявлений контроля типов.

Основное назначение dynamic_cast - защита от нисходящего приведения типов в тех
случаях, когда это лишено смысла. Например, если у вас есть ссылка или указатель
на базовый класс, но вы точно знаете, что на самом деле она указывает на экземпляр
производного типа, вы можете выполнить приведение и работать с производным типом.
Это называется нисходящее приведение. Но если там будет объект базового типа,
лишенный своей производной части, такое приведение лишено смысла и приведет к
неопределенному поведению.

А (type)value ничего не проверяет.

*(5Б) Чем обусловлен, и как можно обойти запрет на частичную специализацию функций.
1. "Основная проблема, связанная с идеей частичной специализации шаблонов функций, заключается в том, что шаблоны функций могут быть перегружены, в отличие от шаблонов классов. Простого указания шаблона функции в специализации, как это делается для специализации класса, недостаточно для идентификации специализированного шаблона.

Ввиду этой проблемы рабочая группа библиотеки изучает другую альтернативу, позволяющую добавлять перегрузки к функциям в пространстве имен std при условии соблюдения определенных ограничений (которые предстоит определить)".

2. "Большая часть этой функциональности может быть предложена через concept_maps, поэтому я полагаю, что не стоит тратить усилия на написание такого сложного расширения исключительно ради использования неограниченных шаблонов в будущем".
- - - - -> В общем, нет необходимости заморачиваться тем сложным, чему есть аналоги и что не является необходимым в ближайшее время.

Для обхода можно использовать перегрузку или шаблонную функцию с более общими параметрами, чтобы охватить все возможные случаи использования функци или использовать шаблонные классы или другие структуры данных для достижения требуемого поведения.